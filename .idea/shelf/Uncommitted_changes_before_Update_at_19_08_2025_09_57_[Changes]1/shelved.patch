Index: src/main/java/Services/CorrelationsView/ScriptGeneration/JMeterAdaption.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package Services.CorrelationsView.ScriptGeneration;\r\n\r\nimport Services.ResponseAnalyzer.AtomicObject;\r\nimport Services.ResponseAnalyzer.StructuredObject;\r\nimport com.fasterxml.jackson.databind.JsonNode;\r\nimport com.fasterxml.jackson.databind.ObjectMapper;\r\nimport com.fasterxml.jackson.databind.node.ObjectNode;\r\nimport com.jayway.jsonpath.Configuration;\r\nimport com.jayway.jsonpath.JsonPath;\r\nimport com.jayway.jsonpath.ParseContext;\r\nimport com.jayway.jsonpath.spi.json.JacksonJsonNodeJsonProvider;\r\nimport com.jayway.jsonpath.spi.mapper.JacksonMappingProvider;\r\nimport org.json.simple.JSONArray;\r\nimport org.json.simple.JSONObject;\r\nimport org.json.simple.parser.JSONParser;\r\nimport org.json.simple.parser.ParseException;\r\nimport org.w3c.dom.*;\r\nimport javax.xml.parsers.DocumentBuilder;\r\nimport javax.xml.parsers.DocumentBuilderFactory;\r\nimport javax.xml.transform.OutputKeys;\r\nimport javax.xml.transform.Transformer;\r\nimport javax.xml.transform.TransformerFactory;\r\nimport javax.xml.transform.dom.DOMSource;\r\nimport javax.xml.transform.stream.StreamResult;\r\nimport java.io.*;\r\nimport java.net.MalformedURLException;\r\nimport java.net.URI;\r\nimport java.net.URISyntaxException;\r\nimport java.net.URL;\r\nimport java.nio.charset.StandardCharsets;\r\nimport java.util.*;\r\nimport java.util.regex.Matcher;\r\nimport java.util.regex.Pattern;\r\nimport java.util.stream.IntStream;\r\nimport Entity.DependencyGraph;\r\nimport Entity.Edge;\r\nimport Entity.CSVNode;\r\nimport Entity.MyNode;\r\nimport Entity.EdgeUrl;\r\nimport Entity.EdgeHeader;\r\nimport Entity.EdgeQueryParam;\r\nimport Properties.Paths;\r\nimport Entity.EdgeBodyJSON;\r\n\r\npublic class JMeterAdaption {\r\n\r\n\r\n    private static ArrayList<variable> variables = new ArrayList<>();\r\n    private static Map<String,Map <Integer, TreeSet<variableWS>>> variablesWS = new HashMap<>();\r\n    private static Set<Integer> SaveTotalResponse = new HashSet<>();\r\n\r\n    public static void runJMeterAdaption(DependencyGraph dependencyGraph, String filenameJmx, String filename) throws Exception {\r\n        JMeterAdaption ja = new JMeterAdaption();\r\n        ja.replaceAdaption(dependencyGraph,filenameJmx,filename);\r\n    }\r\n\r\n\r\n    private Node createHeaderManagerWSS(Document doc,String url, JSONObject replacement,String FILENAME_HAR) throws  Exception{\r\n\r\n        ArrayList<String> permissedItems = new ArrayList<>(Arrays.asList(\"Accept-Encoding\",\"Accept-Language\",\"Cache-Control\",\"Cookie\"));\r\n        Node headerManager = doc.createElement(\"HeaderManager\");\r\n        ((Element)headerManager).setAttribute(\"guiclass\",\"HeaderPanel\");\r\n        ((Element)headerManager).setAttribute(\"testclass\",\"HeaderManager\");\r\n        ((Element)headerManager).setAttribute(\"testname\",\"HTTP Header Manager\");\r\n\r\n        JSONParser parser = new JSONParser();\r\n        try(FileReader fileReader = new FileReader(FILENAME_HAR, StandardCharsets.UTF_8))\r\n        {\r\n            Object obj = parser.parse(fileReader);\r\n            JSONObject jsonObject = (JSONObject) obj;\r\n            JSONArray entries = (JSONArray)((JSONObject) jsonObject.get(\"log\")).get(\"entries\");\r\n            for (JSONObject item : (Iterable<JSONObject>) entries)\r\n            {\r\n                JSONObject request  = (JSONObject)item.get(\"request\");\r\n                String url_request = request.get(\"url\").toString();\r\n                if(url_request.equals(url))\r\n                {\r\n                    Node collectionProp = doc.createElement(\"collectionProp\");\r\n                    ((Element)collectionProp).setAttribute(\"name\",\"HeaderManager.headers\");\r\n                    JSONArray headers = (JSONArray) request.get(\"headers\");\r\n                    for(Object item_headers : headers) {\r\n                        String name = ((JSONObject)item_headers).get(\"name\").toString();\r\n                        if(permissedItems.contains(name)) {\r\n                            Node elementProp = doc.createElement(\"elementProp\");\r\n                            ((Element) elementProp).setAttribute(\"name\", ((JSONObject) item_headers).get(\"name\").toString());\r\n                            ((Element) elementProp).setAttribute(\"elementType\", \"Header\");\r\n\r\n                            Node stringname = doc.createElement(\"stringProp\");\r\n                            ((Element) stringname).setAttribute(\"name\", \"Header.name\");\r\n                            stringname.setTextContent(((JSONObject) item_headers).get(\"name\").toString());\r\n\r\n                            Node stringvalue = doc.createElement(\"stringProp\");\r\n                            ((Element) stringvalue).setAttribute(\"name\", \"Header.value\");\r\n                            stringvalue.setTextContent(((JSONObject) item_headers).get(\"value\").toString());\r\n                            if (\"Accept-Language\".equals(name)) {\r\n                                stringvalue.setTextContent(\"it,it-IT;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6\");\r\n                            }\r\n                            elementProp.appendChild(stringname);\r\n                            elementProp.appendChild(stringvalue);\r\n                            if (\"Cookie\".equals(((JSONObject) item_headers).get(\"name\").toString())) {\r\n                                changeValueCookieHeaderParameter(stringvalue, (JSONArray) replacement.get(\"cookieWS\"), (JSONArray) request.get(\"cookies\"), ((JSONObject) item_headers).get(\"value\").toString());\r\n                            } else {\r\n                                changeValueHeadersParameter(elementProp, (JSONArray) replacement.get(\"headers\"));\r\n                            }\r\n                            collectionProp.appendChild(elementProp);\r\n                        }\r\n                    }\r\n                    headerManager.appendChild(collectionProp);\r\n                }\r\n            }\r\n        }\r\n        return headerManager;\r\n    }\r\n\r\n    private void appendWssUserDefineVariables(Document doc, NodeList threads) {\r\n\r\n        for(int i=0;i<threads.getLength();i++) {\r\n            Node thread = threads.item(i);\r\n            Node hash = thread.getNextSibling().getNextSibling();\r\n            if(hash.getNodeType()==Node.ELEMENT_NODE) {\r\n                if(hash.getNodeName().equals(\"hashTree\")) {\r\n                    Node firstChild = hash.getFirstChild();\r\n                    hash.insertBefore(createUserVariablesForWebSocket(doc), firstChild);\r\n                    hash.insertBefore(doc.createElement(\"hashTree\"), firstChild);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void appendCSVConfig(Document doc, NodeList threads, List<CSVNode>csv_deps) {\r\n\r\n        for(int i=0;i<threads.getLength();i++) {\r\n            Node thread = threads.item(i);\r\n            Node hash = thread.getNextSibling().getNextSibling();\r\n            if(hash.getNodeType()==Node.ELEMENT_NODE) {\r\n                if(hash.getNodeName().equals(\"hashTree\")) {\r\n                    Node firstChild = hash.getFirstChild();\r\n                    for(CSVNode csvNode : csv_deps) {\r\n                        hash.insertBefore(createCSVDataSetConfigElement(doc,csvNode), firstChild);\r\n                        hash.insertBefore(doc.createElement(\"hashTree\"), firstChild);\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private Node createCSVDataSetConfigElement(Document doc, CSVNode csv) {\r\n\r\n        Node csvDataNode = doc.createElement(\"CSVDataSet\");\r\n        ((Element)csvDataNode).setAttribute(\"guiclass\",\"TestBeanGUI\");\r\n        ((Element)csvDataNode).setAttribute(\"testclass\",\"CSVDataSet\");\r\n        ((Element)csvDataNode).setAttribute(\"testname\",\"CSV Data Set Config \"+csv.getFilename());\r\n        ((Element)csvDataNode).setAttribute(\"enabled\",\"true\");\r\n\r\n        Node stringPropFileName = doc.createElement(\"stringProp\");\r\n        ((Element)stringPropFileName).setAttribute(\"name\", \"filename\");\r\n        stringPropFileName.setTextContent(csv.getFilename());\r\n\r\n        Node stringPropEncod = doc.createElement(\"stringProp\");\r\n        ((Element)stringPropEncod).setAttribute(\"name\",\"fileEncoding\");\r\n        stringPropEncod.setTextContent(csv.getEncoding());\r\n\r\n        Node stringPropVarNames = doc.createElement(\"stringProp\");\r\n        ((Element)stringPropVarNames).setAttribute(\"name\",\"variableNames\");\r\n        stringPropVarNames.setTextContent(csv.getVariablesName());\r\n\r\n        Node boolPropFirstLine = doc.createElement(\"boolProp\");\r\n        ((Element)boolPropFirstLine).setAttribute(\"name\",\"ignoreFirstLine\");\r\n        boolPropFirstLine.setTextContent(String.valueOf(csv.isIgnorefirstLine()));\r\n\r\n        Node stringPropDel = doc.createElement(\"stringProp\");\r\n        ((Element)stringPropDel).setAttribute(\"name\",\"delimiter\");\r\n        stringPropDel.setTextContent(\",\");\r\n\r\n        Node boolPropQuotedData = doc.createElement(\"boolProp\");\r\n        ((Element)boolPropQuotedData).setAttribute(\"name\",\"quotedData\");\r\n        boolPropQuotedData.setTextContent(\"false\");\r\n\r\n        Node boolPropRecycle = doc.createElement(\"boolProp\");\r\n        ((Element)boolPropRecycle).setAttribute(\"name\",\"recycle\");\r\n        boolPropRecycle.setTextContent(\"true\");\r\n\r\n        Node boolPropStopThread = doc.createElement(\"boolProp\");\r\n        ((Element)boolPropStopThread).setAttribute(\"name\",\"stopThread\");\r\n        boolPropStopThread.setTextContent(\"false\");\r\n\r\n        Node stringPropShareMode = doc.createElement(\"stringProp\");\r\n        ((Element)stringPropShareMode).setAttribute(\"name\",\"shareMode\");\r\n        stringPropShareMode.setTextContent(\"shareMode.all\");\r\n\r\n        csvDataNode.appendChild(stringPropFileName);\r\n        csvDataNode.appendChild(stringPropEncod);\r\n        csvDataNode.appendChild(stringPropVarNames);\r\n        csvDataNode.appendChild(boolPropFirstLine);\r\n        csvDataNode.appendChild(stringPropDel);\r\n        csvDataNode.appendChild(boolPropQuotedData);\r\n        csvDataNode.appendChild(boolPropRecycle);\r\n        csvDataNode.appendChild(boolPropStopThread);\r\n        csvDataNode.appendChild(stringPropShareMode);\r\n\r\n        return csvDataNode;\r\n    }\r\n\r\n    private Node createUserVariablesForWebSocket(Document doc) {\r\n\r\n        ArrayList<String> listName = new ArrayList<>(Arrays.asList(\"webSocketResponding\"));\r\n        ArrayList<String> listValue = new ArrayList<>(Arrays.asList(\"true\"));\r\n        Node Arguments = doc.createElement(\"Arguments\");\r\n        ((Element)Arguments).setAttribute(\"guiclass\",\"ArgumentsPanel\");\r\n        ((Element)Arguments).setAttribute(\"testclass\",\"Arguments\");\r\n        ((Element)Arguments).setAttribute(\"testname\",\"User Defined Variables\");\r\n        ((Element)Arguments).setAttribute(\"enable\",\"true\");\r\n\r\n        Node collectionProp = doc.createElement(\"collectionProp\");\r\n        ((Element)collectionProp).setAttribute(\"name\",\"Arguments.arguments\");\r\n\r\n        for(int i=0;i<listName.size();i++) {\r\n            Node elementProp= doc.createElement(\"elementProp\");\r\n            ((Element) elementProp).setAttribute(\"name\", listName.get(i));\r\n            ((Element) elementProp).setAttribute(\"elementType\", \"Argument\");\r\n\r\n            Node stringPropName = doc.createElement(\"stringProp\");\r\n            ((Element)stringPropName).setAttribute(\"name\",\"Argument.name\");\r\n            stringPropName.setTextContent(listName.get(i));\r\n\r\n            Node stringPropValue = doc.createElement(\"stringProp\");\r\n            ((Element)stringPropValue).setAttribute(\"name\",\"Argument.value\");\r\n            stringPropValue.setTextContent(listValue.get(i));\r\n\r\n            Node stringPropMeta = doc.createElement(\"stringProp\");\r\n            ((Element)stringPropMeta).setAttribute(\"name\",\"Argument.metadata\");\r\n            stringPropMeta.setTextContent(\"=\");\r\n\r\n            elementProp.appendChild(stringPropName);\r\n            elementProp.appendChild(stringPropValue);\r\n            elementProp.appendChild(stringPropMeta);\r\n            collectionProp.appendChild(elementProp);\r\n        }\r\n        Arguments.appendChild(collectionProp);\r\n        return Arguments;\r\n    }\r\n\r\n    private Node createWSSConnectionNode(Document doc,Node hashTreeFrather ,String url_request, JSONObject replacement,String FILENAME_HAR) throws Exception {\r\n\r\n        Node hashTreeConnection = doc.createElement(\"hashTree\");\r\n        Node webSocketConnection = null;\r\n        webSocketConnection = doc.createElement(\"eu.luminis.jmeter.wssampler.OpenWebSocketSampler\");\r\n        ((Element)webSocketConnection).setAttribute(\"guiclass\",\"eu.luminis.jmeter.wssampler.OpenWebSocketSamplerGui\");\r\n        ((Element)webSocketConnection).setAttribute(\"testclass\",\"eu.luminis.jmeter.wssampler.OpenWebSocketSampler\");\r\n        ((Element)webSocketConnection).setAttribute(\"testname\",\"WebSocket Open Connection\");\r\n        ((Element)webSocketConnection).setAttribute(\"enable\",\"true\");\r\n\r\n        URI url = URI.create(url_request);\r\n        Node boolProp = doc.createElement(\"boolProp\");\r\n        ((Element)boolProp).setAttribute(\"name\",\"TLS\");\r\n        boolProp.setTextContent(\"true\");\r\n\r\n\r\n        Node server = doc.createElement(\"stringProp\");\r\n        ((Element)server).setAttribute(\"name\",\"server\");\r\n        server.setTextContent(url.getHost());\r\n        Node port = doc.createElement(\"stringProp\");\r\n        ((Element)port).setAttribute(\"name\",\"port\");\r\n        port.setTextContent(\"443\");\r\n        Node path = doc.createElement(\"stringProp\");\r\n        ((Element)path).setAttribute(\"name\",\"path\");\r\n        path.setTextContent(url.getPath());\r\n        Node connecttimeout = doc.createElement(\"stringProp\");\r\n        ((Element)connecttimeout).setAttribute(\"name\",\"connectTimeout\");\r\n        connecttimeout.setTextContent(\"20000\");\r\n        Node readtimeout = doc.createElement(\"stringProp\");\r\n        ((Element)readtimeout).setAttribute(\"name\",\"readTimeout\");\r\n        readtimeout.setTextContent(\"60000\");\r\n\r\n        webSocketConnection.appendChild(boolProp);\r\n        webSocketConnection.appendChild(server);\r\n        webSocketConnection.appendChild(port);\r\n        webSocketConnection.appendChild(path);\r\n        webSocketConnection.appendChild(connecttimeout);\r\n        webSocketConnection.appendChild(readtimeout);\r\n\r\n        hashTreeConnection.appendChild(webSocketConnection);\r\n        hashTreeConnection.appendChild(doc.createElement(\"hashTree\"));\r\n        appendHeaderManagerWebSocketRequest(doc,hashTreeConnection,url_request,replacement,FILENAME_HAR);\r\n        return hashTreeConnection;\r\n    }\r\n\r\n    private void appendWebSocketconnection (Document doc, Node hashTree, String url_request , JSONObject replacement,String FILENAME_HAR ) throws Exception {\r\n        Node genericControllerConnection = doc.createElement(\"GenericController\");\r\n        ((Element)genericControllerConnection).setAttribute(\"guiclass\",\"LogicControllerGui\");\r\n        ((Element)genericControllerConnection).setAttribute(\"testclass\",\"GenericController\");\r\n        ((Element)genericControllerConnection).setAttribute(\"testname\",\"Connection\");\r\n        ((Element)genericControllerConnection).setAttribute(\"enabled\",\"true\");\r\n        hashTree.appendChild(genericControllerConnection);\r\n        hashTree.appendChild(createWSSConnectionNode(doc,hashTree,url_request,replacement,FILENAME_HAR));\r\n    }\r\n\r\n    private void appendHeaderManagerWebSocketRequest(Document doc, Node hashTree, String url_request, JSONObject replacement,String FILENAME_HAR) throws Exception {\r\n        hashTree.appendChild(createHeaderManagerWSS(doc,url_request,replacement,FILENAME_HAR));\r\n        hashTree.appendChild(doc.createElement(\"hashTree\"));\r\n    }\r\n\r\n    public void addRegExtractorMain(Document doc, Node http,List<Object> dependencies,int index) {\r\n        String  url = http.getAttributes().getNamedItem(\"testname\").getTextContent();\r\n        String variable_names = \"\";\r\n        String path_expression =\"\";\r\n        String default_value=\"\";\r\n        for(Object object : dependencies)\r\n        {\r\n            if(object.getClass().equals(AtomicObject.class))\r\n            {\r\n                AtomicObject atomicObject = (AtomicObject) object;\r\n                if(!atomicObject.from_set_cookie) {\r\n                    if (\"\".equals(variable_names)) {\r\n                        variable_names = atomicObject.name+\"_\"+index;\r\n                    } else {\r\n                        variable_names = variable_names + \";\" + atomicObject.name+\"_\"+index;\r\n                    }\r\n\r\n                    if (\"\".equals(path_expression)) {\r\n                        path_expression = atomicObject.xpath;\r\n                    } else {\r\n                        path_expression = path_expression + \";\" + atomicObject.xpath;\r\n                    }\r\n\r\n                    if (\"\".equals(default_value)) {\r\n                        default_value = \"NOT_FOUND\";\r\n                    } else {\r\n                        default_value = default_value + \";\" + \"NOT_FOUND\";\r\n                    }\r\n                }\r\n            }else{\r\n                // TO DO\r\n                StructuredObject structuredObject = (StructuredObject) object;\r\n                if (\"\".equals(variable_names)) {\r\n                    variable_names = structuredObject.name+\"_\"+index;\r\n                } else {\r\n                    variable_names = variable_names + \";\" + structuredObject.name+\"_\"+index;\r\n                }\r\n\r\n                if (\"\".equals(path_expression)) {\r\n                    path_expression = structuredObject.xpath;\r\n                } else {\r\n                    path_expression = path_expression + \";\" + structuredObject.xpath;\r\n                }\r\n\r\n                if (\"\".equals(default_value)) {\r\n                    default_value = \"NOT_FOUND\";\r\n                } else {\r\n                    default_value = default_value + \";\" + \"NOT_FOUND\";\r\n                }\r\n            }\r\n        }\r\n        Node hashTree = http.getNextSibling().getNextSibling();\r\n        addRegExtractor(doc, hashTree,variable_names,path_expression,default_value);\r\n    }\r\n\r\n    private void disableHeaderManager(Document doc) {\r\n        NodeList listofHeaderManager = doc.getElementsByTagName(\"HeaderManager\");\r\n        System.out.println(listofHeaderManager.getLength());\r\n        Node item  = listofHeaderManager.item(0);\r\n        ((Element)item).setAttribute(\"enabled\",\"false\");\r\n    }\r\n\r\n    public void replaceAdaption(DependencyGraph dependencyGraph, String FILENAME_JMX,String filename) throws  Exception{\r\n        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\r\n        try (InputStream is = new FileInputStream(FILENAME_JMX))\r\n        {\r\n            DocumentBuilder db = dbf.newDocumentBuilder();\r\n            Document doc = db.parse(is);\r\n            disableHeaderManager(doc);\r\n            NodeList listOfHttp = doc.getElementsByTagName(\"HTTPSamplerProxy\");\r\n            NodeList threadsGroup = doc.getElementsByTagName(\"ThreadGroup\");\r\n            List<CSVNode> csv_dependencies = dependencyGraph.getCSVNodeDependencies();\r\n            appendCSVConfig(doc,threadsGroup,csv_dependencies);\r\n            //check addRegExpr http[0]\r\n            Node http0 = listOfHttp.item(0);\r\n            if(http0.getNodeType() == Node.ELEMENT_NODE)\r\n            {\r\n                MyNode first_node = dependencyGraph.getNodeByIndex(0);\r\n                List<Edge> dependencies = dependencyGraph.getDependenciesByNode(first_node);\r\n                List<Object> dependenciesbyfirstnode = dependencyGraph.getDependenciesToExtractToFromNode(first_node,0);\r\n                analizeHttpNode(doc,http0,dependencies);\r\n                if(!dependenciesbyfirstnode.isEmpty()) {\r\n                    addRegExtractorMain(doc,http0,dependenciesbyfirstnode,0);\r\n                }\r\n            }\r\n            for (int i = 1; i < listOfHttp.getLength(); i++)\r\n            {\r\n                Node http = listOfHttp.item(i);\r\n                Node parent = http.getParentNode();\r\n                Node nextSibling = http.getNextSibling();\r\n                String  url = http.getAttributes().getNamedItem(\"testname\").getTextContent();\r\n                System.out.println(\"[\"+i+\"]\"+url);\r\n                if (http.getNodeType() == Node.ELEMENT_NODE)\r\n                {\r\n                    if(url.startsWith(\"wss\")|| url.startsWith(\"ws\"))\r\n                    {\r\n                        /*http.getParentNode().removeChild(http);\r\n\r\n                        Node genericControllerWSSRequest = doc.createElement(\"GenericController\");\r\n                        ((Element)genericControllerWSSRequest).setAttribute(\"guiclass\",\"LogicControllerGui\");\r\n                        ((Element)genericControllerWSSRequest).setAttribute(\"testclass\",\"GenericController\");\r\n                        ((Element)genericControllerWSSRequest).setAttribute(\"testname\",\"WSS Request\");\r\n                        ((Element)genericControllerWSSRequest).setAttribute(\"enabled\",\"true\");\r\n\r\n                        parent.insertBefore(genericControllerWSSRequest,nextSibling);\r\n                        Node hash = nextSibling.getNextSibling();\r\n\r\n                        if(hash.getNodeType() == Node.ELEMENT_NODE) {\r\n                            if (hash.getNodeName().equals(\"hashTree\")) {\r\n                                while(hash.hasChildNodes()) {\r\n                                    hash.removeChild(hash.getFirstChild());\r\n                                }\r\n                            }\r\n                        }\r\n                        appendWebSocketconnection(doc,hash,url,(JSONObject) replacements.get(i-1),FILENAME_HAR);\r\n                        appendWssUserDefineVariables(doc,threadsGroup);\r\n                        appendRequestsAndResponsesMessage(doc,hash,url,(JSONObject)replacements.get(i-1),i,FILENAME_HAR);\r\n                        appendCloseWssConnection(doc,hash);\r\n                        */\r\n                    }\r\n                    else\r\n                    {\r\n                        MyNode node = dependencyGraph.getNodeByIndex(i);\r\n                        //System.out.println(\"REPLACEMENT [\"+(i-1)+\"]\");\r\n                        List<Edge> dependencies = dependencyGraph.getDependenciesByNode(node);\r\n                        List<Object> dependentByMe = dependencyGraph.getDependenciesToExtractToFromNode(node,i);\r\n                        //System.out.println(replacements.get(i-1));\r\n                        analizeHttpNode(doc,http,dependencies);\r\n                        if (!dependentByMe.isEmpty())\r\n                        {\r\n                            addRegExtractorMain(doc,http,dependentByMe,i);\r\n                        }\r\n                        /*if(checkTotalSaveResponse(i)) {\r\n                            addPostProcessorSaveAllResponse(doc,http,i);\r\n                        }*/\r\n                    }\r\n                }\r\n            }\r\n            String out_filename = filename.substring(0,filename.indexOf(\".\"));\r\n            try(FileOutputStream outputStream = new FileOutputStream(Paths.scripts_saved_path+\"/\"+out_filename+\".jmx\"))\r\n            {\r\n                writeXml(doc,outputStream);\r\n            }catch(Exception e)\r\n            {\r\n                e.printStackTrace();\r\n            }\r\n        }\r\n    }\r\n//}\r\n\r\n    private void appendCloseWssConnection(Document doc, Node hash) {\r\n        Node close = doc.createElement(\"eu.luminis.jmeter.wssampler.CloseWebSocketSampler\");\r\n        ((Element)close).setAttribute(\"guiclass\",\"eu.luminis.jmeter.wssampler.CloseWebSocketSamplerGui\");\r\n        ((Element)close).setAttribute(\"testclass\",\"eu.luminis.jmeter.wssampler.CloseWebSocketSampler\");\r\n        ((Element)close).setAttribute(\"testname\",\"WebSocket Close\");\r\n        ((Element)close).setAttribute(\"enabled\",\"true\");\r\n\r\n        Node statusCode = doc.createElement(\"stringProp\");\r\n        ((Element)statusCode).setAttribute(\"name\",\"statusCode\");\r\n        statusCode.setTextContent(\"1000\");\r\n        Node readT = doc.createElement(\"stringProp\");\r\n        ((Element)readT).setAttribute(\"name\",\"readTimeout\");\r\n        readT.setTextContent(\"6000\");\r\n\r\n        close.appendChild(statusCode);\r\n        close.appendChild(readT);\r\n\r\n        hash.appendChild(close);\r\n        hash.appendChild(doc.createElement(\"hashTree\"));\r\n    }\r\n\r\n\r\n    private void addPostProcessorSaveAllResponse(Document doc, Node http,int index) {\r\n        Node postProcessor = null;\r\n        Node hashTree = http.getNextSibling().getNextSibling();\r\n        postProcessor = doc.createElement(\"JSR223PostProcessor\");\r\n        ((Element)postProcessor).setAttribute(\"guiclass\",\"TestBeanGUI\");\r\n        ((Element)postProcessor).setAttribute(\"testclass\",\"JSR223PostProcessor\");\r\n        ((Element)postProcessor).setAttribute(\"testname\",\"SaveResponse\"+index);\r\n        ((Element)postProcessor).setAttribute(\"enabled\",\"true\");\r\n\r\n        Node scriptLenguage = doc.createElement(\"stringProp\");\r\n        ((Element)scriptLenguage).setAttribute(\"name\",\"scriptLanguage\");\r\n        scriptLenguage.setTextContent(\"groovy\");\r\n\r\n        Node parameters = doc.createElement(\"stringProp\");\r\n        ((Element)parameters).setAttribute(\"name\",\"parameters\");\r\n        parameters.setTextContent(\"\");\r\n\r\n        Node filename = doc.createElement(\"stringProp\");\r\n        ((Element)filename).setAttribute(\"name\",\"filename\");\r\n        filename.setTextContent(\"\");\r\n\r\n        Node cackeKey = doc.createElement(\"stringProp\");\r\n        ((Element)cackeKey).setAttribute(\"name\",\"cacheKey\");\r\n        cackeKey.setTextContent(\"true\");\r\n        Node script = doc.createElement(\"stringProp\");\r\n        ((Element)script).setAttribute(\"name\",\"script\");\r\n        script.setTextContent(\"\" +\r\n                \"var responsedata = prev.getResponseDataAsString();\\n\" +\r\n                \"vars.put(\\\"Request\"+index+\"_Response\\\",responsedata);\");\r\n\r\n        postProcessor.appendChild(scriptLenguage);\r\n        postProcessor.appendChild(parameters);\r\n        postProcessor.appendChild(filename);\r\n        postProcessor.appendChild(cackeKey);\r\n        postProcessor.appendChild(script);\r\n        //hashTree.appendChild(doc.createElement(\"hashTree\"));\r\n        hashTree.appendChild(postProcessor);\r\n\r\n    }\r\n\r\n    private void writeXml(Document doc, OutputStream output) throws Exception {\r\n        doc.getDocumentElement().normalize();\r\n        TransformerFactory transformerFactory = TransformerFactory.newInstance();\r\n        Transformer transformer = transformerFactory.newTransformer();\r\n        transformer.setOutputProperty(OutputKeys.INDENT,\"yes\");\r\n        DOMSource source = new DOMSource(doc);\r\n        StreamResult result = new StreamResult(output);\r\n        transformer.transform(source,result);\r\n    }\r\n\r\n    public  void addRegExtractor(Document doc, Node hashTree,String name, String path, String defa) {\r\n\r\n        Node regExtr = null;\r\n        regExtr= doc.createElement(\"JSONPostProcessor\");\r\n        ((Element)regExtr).setAttribute(\"guiclass\",\"JSONPostProcessorGui\");\r\n        ((Element)regExtr).setAttribute(\"testclass\",\"JSONPostProcessor\");\r\n        ((Element)regExtr).setAttribute(\"testname\",\"JSON Extractor\");\r\n        ((Element)regExtr).setAttribute(\"enable\",\"true\");\r\n\r\n        Node refname = doc.createElement(\"stringProp\");\r\n        ((Element)refname).setAttribute(\"name\",\"JSONPostProcessor.referenceNames\");\r\n        refname.setTextContent(name);\r\n\r\n        Node regex = doc.createElement(\"stringProp\");\r\n        ((Element)regex).setAttribute(\"name\",\"JSONPostProcessor.jsonPathExprs\");\r\n        regex.setTextContent(path);\r\n\r\n        Node num = doc.createElement(\"stringProp\");\r\n        ((Element)num).setAttribute(\"name\",\"JSONPostProcessor.match_numbers\");\r\n        num.setTextContent(\"\");\r\n\r\n        Node def = doc.createElement(\"stringProp\");\r\n        ((Element)def).setAttribute(\"name\",\"JSONPostProcessor.defaultValues\");\r\n        def.setTextContent(defa);\r\n\r\n        regExtr.appendChild(refname);\r\n        regExtr.appendChild(regex);\r\n        regExtr.appendChild(num);\r\n        regExtr.appendChild(def);\r\n        hashTree.appendChild(regExtr);\r\n        hashTree.appendChild(doc.createElement(\"hashTree\"));\r\n\r\n    }\r\n\r\n    public boolean checkRegExtractor(Node http,int index_req) {\r\n        String  url = http.getAttributes().getNamedItem(\"testname\").getTextContent();\r\n        for(int i=0; i<variables.size();i++) {\r\n            if(variables.get(i).from.equals(url)&& variables.get(i).num_req==index_req) {return true;}\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public boolean checkTotalSaveResponse(int index_req){\r\n        for(Integer i : SaveTotalResponse) {\r\n            if(i == index_req)\r\n                return true;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    public void analizeHttpNode(Document doc, Node http, List<Edge> dependencies) throws MalformedURLException, URISyntaxException, ParseException {\r\n        NodeList childNodes = http.getChildNodes();\r\n        for(int j=0 ; j< childNodes.getLength();j++) {\r\n            Node item = childNodes.item(j);\r\n            if(item.getNodeType() == Node.ELEMENT_NODE) {\r\n\r\n                if(\"stringProp\".equals(item.getNodeName()) ){\r\n                    if(\"HTTPSampler.path\".equals(item.getAttributes().getNamedItem(\"name\").getTextContent())){\r\n                        replacementsInURL(item,dependencies);\r\n                    }\r\n                }\r\n\r\n                if(\"elementProp\".equals(item.getNodeName())){\r\n                    if(item.getAttributes().getNamedItem(\"name\").getNodeValue().equals(\"HTTPSampler.header_manager\")) {\r\n                        replacementsInHeaders(item,dependencies);\r\n                    }else {\r\n                        if (item.getAttributes().getNamedItem(\"name\").getNodeValue().equals(\"HTTPsampler.Arguments\")) {\r\n                            //System.out.println(replacement);\r\n                            replacementsInQueryParameters_PostData(item, dependencies, \"queryParameters\");\r\n                            //System.out.println(replacement.containsKey(\"postData\"));\r\n                            if(!dependencies.isEmpty()){\r\n                                MyNode node = dependencies.get(0).to;\r\n                                if (node.request.getMethod().equals(\"POST\")|| node.request.getMethod().equals(\"PUT\")) {\r\n                                    String mimeType = node.request.getPostData().getMimeType();\r\n                                    if(mimeType.equals(\"application/x-www-form-urlencoded\")) {\r\n                                        replacementsInQueryParameters_PostData(item, dependencies, \"postData\");\r\n                                    }else if(mimeType.equals(\"application/json\")){\r\n                                        replacementInPostDataBodyJson(doc,http,item,dependencies);\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private String convertBracketJsonPathToDotNotation(String path) {\r\n        StringBuilder result = new StringBuilder();\r\n        String regex = \"\\\\['([^\\\\]]+)'\\\\]|\\\\[(\\\\d+)]\";\r\n        Matcher matcher = Pattern.compile(regex).matcher(path);\r\n\r\n        // Start with \"$\"\r\n        result.append(\"$\");\r\n\r\n        while (matcher.find()) {\r\n            if (matcher.group(1) != null) {\r\n                // Key: ['key'] → .key\r\n                result.append(\".\").append(matcher.group(1));\r\n            } else if (matcher.group(2) != null) {\r\n                // Index: [number] → [number]\r\n                result.append(\"[\").append(matcher.group(2)).append(\"]\");\r\n            }\r\n        }\r\n\r\n        return result.toString();\r\n    }\r\n\r\n    private String findJsonPathRecursive(Object json, String key, String currentPath) {\r\n        if (json instanceof JSONObject) {\r\n            JSONObject jsonObject = (JSONObject) json;\r\n            for (Object k : jsonObject.keySet()) {\r\n                String keyStr = (String) k;\r\n                Object value = jsonObject.get(keyStr);\r\n                String newPath = currentPath + \"['\" + keyStr + \"']\";\r\n\r\n                if (keyStr.equals(key)) {\r\n                    return newPath;\r\n                }\r\n\r\n                String result = findJsonPathRecursive(value, key, newPath);\r\n                if (result != null) {\r\n                    return result;\r\n                }\r\n            }\r\n        } else if (json instanceof JSONArray) {\r\n            JSONArray jsonArray = (JSONArray) json;\r\n            for (int i = 0; i < jsonArray.size(); i++) {\r\n                String newPath = currentPath + \"[\" + i + \"]\";\r\n                Object value = jsonArray.get(i);\r\n\r\n                String result = findJsonPathRecursive(value, key, newPath);\r\n                if (result != null) {\r\n                    return result;\r\n                }\r\n            }\r\n        }\r\n        return null;\r\n    }\r\n\r\n    private void replacementInPostDataBodyJson(Document doc,Node http, Node item, List<Edge> dependencies) throws ParseException {\r\n        NodeList elementPropChild = item.getChildNodes();\r\n        for (int k = 0; k < elementPropChild.getLength(); k++) {\r\n            Node collectionProp = elementPropChild.item(k);\r\n            if (collectionProp.getNodeType() == Node.ELEMENT_NODE) {\r\n                if (\"collectionProp\".equals(collectionProp.getNodeName())) {\r\n                    NodeList elementsPropCollection = collectionProp.getChildNodes();\r\n                    for (int i = 0; i < elementsPropCollection.getLength(); i++) {\r\n                        Node elementProp = elementsPropCollection.item(i);\r\n                        if (elementProp.getNodeType() == Node.ELEMENT_NODE) {\r\n                            if (\"elementProp\".equals(elementProp.getNodeName())) {\r\n                                NodeList argumentsChilds = elementProp.getChildNodes();\r\n                                for(int j=0;j< argumentsChilds.getLength();j++){\r\n                                    Node stringProp = argumentsChilds.item(j);\r\n                                    if(stringProp.getNodeType()== Node.ELEMENT_NODE) {\r\n                                        if(\"stringProp\".equals(stringProp.getNodeName())) {\r\n                                            if(stringProp.getAttributes().getNamedItem(\"name\").getNodeValue().equals(\"Argument.value\"))\r\n                                            {\r\n                                                String data = stringProp.getTextContent();\r\n                                                List<EdgeBodyJSON> list = IsDipendentFromPreviousAllResponse(dependencies);\r\n                                                if(list!=null) {\r\n                                                    if (list.size()==1){\r\n                                                        EdgeBodyJSON isDipFromPrevResp = list.get(0);\r\n                                                        String name = isDipFromPrevResp.structuredObject.name;\r\n                                                        data = \"${\"+name+\"_\"+isDipFromPrevResp.from_index+\"}\";\r\n                                                    }else{\r\n                                                        // bisogna estrarre la risposta e modificarla in base alle altre dipedenze.\r\n                                                        appendPrePocessorNodeToModifyResponseData(doc,http,list);\r\n                                                        data = \"${modifiedBody_\"+ list.get(0).to.indexs+\"}\";\r\n                                                    }\r\n                                                }\r\n                                                else {\r\n                                                    for (Edge edge : dependencies) {\r\n                                                        if(edge.getClass().equals(EdgeBodyJSON.class))\r\n                                                        {\r\n                                                            EdgeBodyJSON edgeBodyJSON = (EdgeBodyJSON)edge;\r\n                                                            JSONParser parser = new JSONParser();\r\n                                                            String jsonString = edgeBodyJSON.to.request.getPostData().getText();\r\n                                                            JSONObject jsonObject = (JSONObject) parser.parse(jsonString);\r\n                                                            String xpath = findJsonPathRecursive(jsonObject,edgeBodyJSON.name,\"$\");\r\n\r\n                                                            if(edgeBodyJSON.dependency!=null){ // CASO ATOMICOBJECT\r\n                                                                String name = edgeBodyJSON.dependency.name;\r\n                                                                if(!name.startsWith(\"$\")){\r\n                                                                    if(!edgeBodyJSON.dependency.value.equals(\"manually_inserted\") && !edgeBodyJSON.dependency.value.equals(\"manually_csv\"))\r\n                                                                        name=\"${\"+name+\"_\"+edgeBodyJSON.from_index+\"}\";\r\n                                                                    else {\r\n                                                                        //name=\"${\"+name+\"}\";\r\n                                                                    }\r\n                                                                }\r\n                                                                data = replaceAtomicJSONObject(data, xpath,name);\r\n                                                            }else\r\n                                                            {\r\n                                                                String name = edgeBodyJSON.structuredObject.name;\r\n                                                                if(!name.startsWith(\"$\")){\r\n                                                                    name=\"${\"+name+\"_\"+edgeBodyJSON.from_index+\"}\";\r\n                                                                }\r\n                                                                data = replaceStructureJSONObject(data,xpath,edgeBodyJSON.name,name);\r\n                                                            }\r\n                                                        }\r\n                                                    }\r\n                                                }\r\n                                                stringProp.setTextContent(data);\r\n                                            }\r\n                                        }\r\n                                    }\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    private void appendPrePocessorNodeToModifyResponseData(Document doc, Node http, List<EdgeBodyJSON> listEdgeBodyJSON) throws ParseException {\r\n        Node preProcessor = null;\r\n        Node hashTree = http.getNextSibling().getNextSibling();\r\n        preProcessor = doc.createElement(\"JSR223PreProcessor\");\r\n        ((Element)preProcessor).setAttribute(\"guiclass\",\"TestBeanGUI\");\r\n        ((Element)preProcessor).setAttribute(\"testclass\",\"JSR223PreProcessor\");\r\n        ((Element)preProcessor).setAttribute(\"testname\",\"Modify previously saved json response\");\r\n        ((Element)preProcessor).setAttribute(\"enabled\",\"true\");\r\n\r\n        Node scriptLenguage = doc.createElement(\"stringProp\");\r\n        ((Element)scriptLenguage).setAttribute(\"name\",\"scriptLanguage\");\r\n        scriptLenguage.setTextContent(\"groovy\");\r\n\r\n        Node parameters = doc.createElement(\"stringProp\");\r\n        ((Element)parameters).setAttribute(\"name\",\"parameters\");\r\n        parameters.setTextContent(\"\");\r\n\r\n        Node filename = doc.createElement(\"stringProp\");\r\n        ((Element)filename).setAttribute(\"name\",\"filename\");\r\n        filename.setTextContent(\"\");\r\n\r\n        Node cackeKey = doc.createElement(\"stringProp\");\r\n        ((Element)cackeKey).setAttribute(\"name\",\"cacheKey\");\r\n        cackeKey.setTextContent(\"true\");\r\n        Node script = doc.createElement(\"stringProp\");\r\n        ((Element)script).setAttribute(\"name\",\"script\");\r\n\r\n        String scriptString = \"import com.jayway.jsonpath.JsonPath\\n\"+\r\n        \"import com.jayway.jsonpath.DocumentContext\\n\";\r\n        // get previous the index of the request we're extracting all the response\r\n        int previous_all_req_index=0;\r\n        for(Edge edge : listEdgeBodyJSON) {\r\n            if(edge.getClass().equals(EdgeBodyJSON.class)){\r\n                EdgeBodyJSON edgeBodyJSON = (EdgeBodyJSON) edge;\r\n                if ( edgeBodyJSON.structuredObject!= null && edgeBodyJSON.name.equals(\"All\")){\r\n                    previous_all_req_index = edgeBodyJSON.from_index;\r\n                }\r\n            }\r\n        }\r\n        scriptString+=\"def originalJson = vars.get(\\\"All_\"+previous_all_req_index+\"\\\")\\n\"+\r\n                \"DocumentContext jsonDoc = JsonPath.parse(originalJson)\\n\"+\r\n                \"def substitutions = [\\n\";\r\n        for (Edge edge : listEdgeBodyJSON){\r\n            if (edge.getClass().equals(EdgeBodyJSON.class)){\r\n                EdgeBodyJSON edgeBodyJSON = (EdgeBodyJSON)edge;\r\n                if (!edgeBodyJSON.name.equals(\"All\"))\r\n                {\r\n                    JSONParser parser = new JSONParser();\r\n                    String jsonString = edgeBodyJSON.to.request.getPostData().getText();\r\n                    JSONObject jsonObject = (JSONObject) parser.parse(jsonString);\r\n                    String xpath_array = findJsonPathRecursive(jsonObject,edgeBodyJSON.name,\"$\");\r\n                    String xpath = convertBracketJsonPathToDotNotation(xpath_array);\r\n                    System.out.println(xpath);\r\n\r\n                    if(!edgeBodyJSON.dependency.value.equals(\"manually_inserted\") && !edgeBodyJSON.dependency.value.equals(\"manually_csv\"))\r\n                    {\r\n                        if(edgeBodyJSON.structuredObject!=null){\r\n                            System.out.println(edgeBodyJSON.structuredObject);\r\n                            scriptString+=\"[path:\\'\"+xpath+\"\\', newValue:\\'${\"+edgeBodyJSON.structuredObject.name+\"_\"+edgeBodyJSON.from_index+\"}\\'],\\n\";\r\n                        }else{\r\n                            System.out.println(edgeBodyJSON.dependency);\r\n                            scriptString+=\"[path:\\'\"+xpath+\"\\', newValue:\\'${\"+edgeBodyJSON.dependency.name+\"_\"+edgeBodyJSON.from_index+\"}\\'],\\n\";\r\n                        }\r\n                    }\r\n                    else{\r\n                        if(edgeBodyJSON.structuredObject!=null){\r\n                            scriptString+=\"[path:\\'\"+xpath+\"\\', newValue:\\'\"+edgeBodyJSON.dependency.name+\"\\'],\\n\";\r\n                        }else{\r\n                            scriptString+=\"[path:\\'\"+xpath+\"\\', newValue:\\'\"+edgeBodyJSON.dependency.name+\"\\'],\\n\";\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        scriptString+=\"]\\n\"+\r\n                \"substitutions.each { sub ->\\n\" +\r\n                \"    jsonDoc.set(sub.path, sub.newValue)\\n\" +\r\n                \"}\\n\";\r\n        scriptString+=\"String modifiedJson = jsonDoc.jsonString()\\n\"+\r\n                \"vars.put(\\\"modifiedBody_\"+ listEdgeBodyJSON.get(0).to.indexs+\"\\\",modifiedJson)\";\r\n        script.setTextContent(scriptString);\r\n        preProcessor.appendChild(scriptLenguage);\r\n        preProcessor.appendChild(parameters);\r\n        preProcessor.appendChild(filename);\r\n        preProcessor.appendChild(cackeKey);\r\n        preProcessor.appendChild(script);\r\n        //hashTree.appendChild(doc.createElement(\"hashTree\"));\r\n        hashTree.appendChild(preProcessor);\r\n    }\r\n\r\n    private List<EdgeBodyJSON> IsDipendentFromPreviousAllResponse(List<Edge> dependencies) {\r\n        List<EdgeBodyJSON> res = new ArrayList<EdgeBodyJSON>();\r\n        Boolean found = false;\r\n        for(Edge edge : dependencies) {\r\n            if(edge.getClass().equals(EdgeBodyJSON.class)){\r\n                EdgeBodyJSON edgeBodyJSON = (EdgeBodyJSON) edge;\r\n                res.add(edgeBodyJSON);\r\n                if ( edgeBodyJSON.structuredObject!= null && edgeBodyJSON.name.equals(\"All\")){\r\n                    found = true;\r\n                }\r\n            }\r\n        }\r\n        if(found)\r\n            return res;\r\n        else\r\n            return null;\r\n    }\r\n\r\n    private String replaceAtomicJSONObject (String data, String xpath, String value) {\r\n        System.out.println(xpath);\r\n        final Configuration configuration = Configuration.builder()\r\n                .jsonProvider(new JacksonJsonNodeJsonProvider())\r\n                .mappingProvider(new JacksonMappingProvider())\r\n                .build();\r\n        JsonNode updatedJson = JsonPath.using(configuration).parse(data).set(xpath,value).json();\r\n        return updatedJson.toString();\r\n    }\r\n\r\n    private static String replaceFieldValue(String json, String key, String value) {\r\n        // Creazione della stringa da cercare e della stringa sostitutiva\r\n        String toReplace = \"\\\"\" + key + \"\\\":\\\"\" + value + \"\\\"\";\r\n        String replacement = \"\\\"\" + key + \"\\\":\" + value;\r\n        // Sostituzione\r\n        String modifiedJsonString = json.replace(toReplace, replacement);\r\n        return modifiedJsonString;\r\n    }\r\n    private String replaceStructureJSONObject(String data, String xpath,String key, String value){\r\n        String json = replaceAtomicJSONObject(data,xpath,value);\r\n        return  replaceFieldValue(json,key,value);\r\n    }\r\n\r\n\r\n    public void replacementsInURL(Node item, List<Edge> dependencies) throws MalformedURLException, URISyntaxException {\r\n        if(!dependencies.isEmpty()) {\r\n            String originalUrl = dependencies.get(0).to.getRequest().getUrl();\r\n            URI uri = new URI(originalUrl);\r\n            String path = uri.getPath();\r\n            String[] subpaths = path.split(\"/\");\r\n            int changed =0;\r\n            for (Edge edge : dependencies) {\r\n                if (edge.getClass().equals(EdgeUrl.class)) {\r\n                    EdgeUrl edgeUrl = (EdgeUrl) edge;\r\n                    for (int i = 0; i < subpaths.length; i++) {\r\n                        if (subpaths[i].equals(edgeUrl.subPath)) {\r\n                            changed=1;\r\n                            if(!edgeUrl.dependency.value.equals(\"manually_inserted\") && !edgeUrl.dependency.value.equals(\"manually_csv\"))\r\n                                subpaths[i] = \"${\" + edgeUrl.dependency.name+\"_\"+edgeUrl.from_index+\"}\";\r\n                            else\r\n                                subpaths[i] = edgeUrl.dependency.name;\r\n\r\n                            break;\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n            if (changed==0){return;}\r\n            // Ricostruisci il percorso\r\n            StringBuilder newPath = new StringBuilder();\r\n            for (String subPath : subpaths) {\r\n                if (!subPath.isEmpty()) {\r\n                    newPath.append(\"/\").append(subPath);\r\n                }\r\n            }\r\n            /*\r\n            // Ricostruisci l'URI con il nuovo percorso\r\n            URI newUri = new URI(uri.getScheme(), uri.getAuthority(), newPath.toString(), uri.getQuery(), uri.getFragment());\r\n            String newUrl = newUri.toString();\r\n\r\n            item.setTextContent(newUrl);*/\r\n            // Ricostruisci l'URL manualmente senza URLEncoding\r\n            StringBuilder newUrl = new StringBuilder();\r\n            newUrl.append(uri.getScheme())\r\n                    .append(\"://\")\r\n                    .append(uri.getAuthority())\r\n                    .append(newPath);\r\n\r\n            if (uri.getQuery() != null) {\r\n                newUrl.append(\"?\").append(uri.getQuery());\r\n            }\r\n\r\n            if (uri.getFragment() != null) {\r\n                newUrl.append(\"#\").append(uri.getFragment());\r\n            }\r\n\r\n            item.setTextContent(newUrl.toString());\r\n        }\r\n    }\r\n\r\n    public void replacementsInHeaders(Node item, List<Edge> dependencies) {\r\n        NodeList elementPropChild = item.getChildNodes();\r\n        for(int k=0 ; k< elementPropChild.getLength();k++) {\r\n            Node collectionProp  = elementPropChild.item(k);\r\n            if (collectionProp.getNodeType() == Node.ELEMENT_NODE) {\r\n                if (\"collectionProp\".equals(collectionProp.getNodeName())) {\r\n                    NodeList elementsPropCollection = collectionProp.getChildNodes();\r\n                    for(int i =0; i < elementsPropCollection.getLength();i++) {\r\n                        Node elementProp = elementsPropCollection.item(i);\r\n                        if(elementProp.getNodeType() == Node.ELEMENT_NODE) {\r\n                            if(\"elementProp\".equals(elementProp.getNodeName())){\r\n                                changeValueHeadersParameter(elementProp,dependencies);\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void replacementsInQueryParameters_PostData(Node item, List<Edge> dependencies,String name) {\r\n        NodeList elementPropChild = item.getChildNodes();\r\n        for(int k=0 ; k< elementPropChild.getLength();k++) {\r\n            Node collectionProp  = elementPropChild.item(k);\r\n            if (collectionProp.getNodeType() == Node.ELEMENT_NODE) {\r\n                if (\"collectionProp\".equals(collectionProp.getNodeName())) {\r\n                    NodeList elementsPropCollection = collectionProp.getChildNodes();\r\n                    for(int i =0; i < elementsPropCollection.getLength();i++) {\r\n                        Node elementProp = elementsPropCollection.item(i);\r\n                        if(elementProp.getNodeType() == Node.ELEMENT_NODE) {\r\n                            if(\"elementProp\".equals(elementProp.getNodeName())){\r\n                                if(name.equals(\"postData\")) {\r\n                                    changeValueQueryParameter(elementProp,dependencies);\r\n                                }else {\r\n                                    changeValueQueryParameter(elementProp, dependencies);\r\n                                }\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void changeValueHeadersParameter(Node elementProp, List<Edge> dependencies){\r\n        String name = elementProp.getAttributes().getNamedItem(\"name\").getTextContent();\r\n        String value= \"\";\r\n        for(Edge edge: dependencies) {\r\n            if(edge.getClass().equals(EdgeHeader.class)){\r\n                EdgeHeader edgeHeader = (EdgeHeader)edge;\r\n                if(name.equals(edgeHeader.header_name)) {\r\n                    if(!edgeHeader.dependency.value.equals(\"manually_inserted\") && !edgeHeader.dependency.value.equals(\"manually_csv\")) {\r\n                        if (!name.equals(\"Authorization\"))\r\n                            value = \"${\" + edgeHeader.dependency.name + \"_\" + edgeHeader.from_index + \"}\";\r\n                        else\r\n                            value = \"Bearer ${\" + edgeHeader.dependency.name + \"_\" + edgeHeader.from_index + \"}\";\r\n                    }\r\n                    else\r\n                        value = edgeHeader.dependency.name;\r\n\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if(\"\".equals(value)) {return;}\r\n\r\n        NodeList stringProp = elementProp.getChildNodes();\r\n        for(int i=0; i< stringProp.getLength();i++) {\r\n            Node item = stringProp.item(i);\r\n            if(item.getNodeType() == Node.ELEMENT_NODE) {\r\n                if(\"Header.value\".equals(item.getAttributes().getNamedItem(\"name\").getTextContent())) {\r\n                    item.setTextContent(value);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n\r\n    public void changeValueCookieHeaderParameter(Node stringvalue, JSONArray cookiesReplacements, JSONArray cookies ,String value)\r\n    {\r\n        for(Object item_cookies : cookies) {\r\n            String name_item_cookies = ((JSONObject)item_cookies).get(\"name\").toString();\r\n            String value_item_cookies = ((JSONObject)item_cookies).get(\"value\").toString();\r\n            for(Object item_repCookie: cookiesReplacements) {\r\n                String name_item_repCookie = ((JSONObject)item_repCookie).get(\"name\").toString();\r\n                String value_item_repCookie = ((JSONObject)item_repCookie).get(\"value\").toString();\r\n                if(name_item_cookies.equals(name_item_repCookie)) {\r\n                    value = value.replace(value_item_cookies,value_item_repCookie);\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        stringvalue.setTextContent(value);\r\n    }\r\n\r\n    public void changeValueQueryParameter (Node elementProp, List<Edge> dependencies) {\r\n        NodeList stringProp = elementProp.getChildNodes();\r\n        for(int i=0; i< stringProp.getLength();i++) {\r\n            Node item = stringProp.item(i);\r\n            String value= \"\";\r\n            if(item.getNodeType() == Node.ELEMENT_NODE) {\r\n                if(\"Argument.value\".equals(item.getAttributes().getNamedItem(\"name\").getTextContent())) {\r\n                    String name = elementProp.getAttributes().getNamedItem(\"name\").getTextContent();\r\n                    // TO DO : CHECK UE POST DATA\r\n                    for(Edge edge: dependencies) {\r\n                        if(edge.getClass().equals(EdgeQueryParam.class)){\r\n                            EdgeQueryParam edgeQueryParam = (EdgeQueryParam) edge;\r\n                            if(name.equals(edgeQueryParam.query_param_name)) {\r\n                                if(!edgeQueryParam.dependency.value.equals(\"manually_inserted\")&&!edgeQueryParam.dependency.value.equals(\"manually_csv\"))\r\n                                    value = \"${\"+edgeQueryParam.dependency.name+\"_\"+edgeQueryParam.from_index+\"}\";\r\n                                else\r\n                                    value = edgeQueryParam.dependency.name;\r\n                                break;\r\n                            }\r\n                        }\r\n\r\n                    }\r\n                    if(!\"\".equals(value)) {\r\n                        item.setTextContent(value);\r\n                    }\r\n                }\r\n\r\n                if(\"HTTPArgument.always_encode\".equals(item.getAttributes().getNamedItem(\"name\").getTextContent())){\r\n                    item.setTextContent(\"false\");\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    public void addVariableAtList(ArrayList<String> varNameList, ArrayList<String> fromList, ArrayList<Integer> numReqList ,String name, String from,String num_req) {\r\n        if(varNameList.contains(name)) {\r\n            int[] indexes = IntStream.range(0, varNameList.size())\r\n                    .filter(i -> varNameList.get(i).equals(name))\r\n                    .toArray();\r\n\r\n            for (int i = 0; i < indexes.length; i++) {\r\n                if (fromList.get(indexes[i]).equals(from) && numReqList.get(indexes[i]) == Integer.parseInt(num_req)) {\r\n                    return;\r\n                }\r\n            }\r\n        }\r\n        varNameList.add(name);\r\n        fromList.add(from);\r\n        numReqList.add(Integer.parseInt(num_req));\r\n\r\n    }\r\n\r\n    private void addVariablesWS(JSONObject item, String url ) {\r\n        String from= item.get(\"From\").toString();\r\n        String fromResWS=item.get(\"FromResWS\").toString();\r\n        String varName= item.get(\"Name\").toString();\r\n        String regEx= item.get(\"regEx\").toString();\r\n        String value = item.get(\"Value\").toString();\r\n        variableWS vws = new variableWS(from,fromResWS,varName,regEx,value.substring(2,value.length()-1));\r\n        if(variablesWS.get(url).containsKey(Integer.parseInt(fromResWS))){\r\n            variablesWS.get(url).get(Integer.parseInt(fromResWS)).add(vws);\r\n        }else {\r\n            TreeSet<variableWS> list = new TreeSet <>(new Comparator<variableWS>() {\r\n                @Override\r\n                public int compare(variableWS v1, variableWS v2) {\r\n                    if (\r\n                            v1.fromResWS.equals(v2.fromResWS) &&\r\n                                    v1.varName.equals(v2.varName)\r\n                    )\r\n                        return 0;\r\n                    else\r\n                        return -1;\r\n                }\r\n            });\r\n            list.add(vws);\r\n            variablesWS.get(url).put(Integer.parseInt(fromResWS),list);\r\n        }\r\n    }\r\n\r\n    public String getNameFromValue ( String value) {\r\n        int pos_g1 = value.indexOf(\"{\");\r\n        int pos_d =  value.indexOf(\"$\");\r\n        int pos_g2 = value.indexOf(\"}\");\r\n        if(pos_d+1 == pos_g1) {\r\n            return  value.substring(pos_g1+1,pos_g2);\r\n        }\r\n        return \"\";\r\n    }\r\n    class variableWS {\r\n        public String from;\r\n        public String fromResWS;\r\n        public String varName;\r\n        public String regEx;\r\n        public String pathExpr;\r\n        public String value;\r\n\r\n        public String calculatePathExprByValue(String value) {\r\n            return \"$.\"+value.replace(\"-\",\".\");\r\n        }\r\n\r\n        public variableWS(String from, String fromResWS, String varName, String regEx,String value) {\r\n            this.from= from;\r\n            this.fromResWS=fromResWS;\r\n            this.varName= varName;\r\n            this.regEx=regEx;\r\n            this.value=value;\r\n            this.pathExpr=calculatePathExprByValue(value);\r\n        }\r\n        @Override\r\n        public String toString(){\r\n            return from+\" \"+fromResWS+\" \"+varName;\r\n        }\r\n\r\n    }\r\n\r\n    class variable implements Comparable<variable>{\r\n        public String from;\r\n        public String varName;\r\n        public String ApplyTo;\r\n        public String FiledToCheck;\r\n        public String pathExpr;\r\n        public int num_req;\r\n\r\n        public variable(String from, String varName, String applyTo, String filedToCheck, String pathExpr,int num_req) {\r\n            this.from = from;\r\n            this.varName = varName;\r\n            this.ApplyTo = applyTo;\r\n            this.FiledToCheck = filedToCheck;\r\n            this.pathExpr = pathExpr;\r\n            this.num_req =num_req;\r\n        }\r\n        public int compareTo(variable v) {\r\n\r\n            if (this.from.equals(v.from) &&\r\n                    this.pathExpr.equals(v.pathExpr) &&\r\n                    this.varName.equals(v.varName) &&\r\n                    this.num_req==v.num_req\r\n            )\r\n                return 0;\r\n            else\r\n                return -1;\r\n        }\r\n\r\n        @Override\r\n        public String toString() {\r\n            return this.varName+\" \\n\"+this.from;\r\n        }\r\n    }\r\n\r\n    private void appendRequestsAndResponsesMessage(Document doc, Node hashTree, String url, JSONObject replacement,int index_request_har,String FILENAME_HAR) {\r\n        JSONParser parser = new JSONParser();\r\n        try(FileReader fileReader = new FileReader(FILENAME_HAR, StandardCharsets.UTF_8)) {\r\n            Object obj = parser.parse(fileReader);\r\n            JSONObject jsonObject = (JSONObject) obj;\r\n            JSONArray entries = (JSONArray) ((JSONObject) jsonObject.get(\"log\")).get(\"entries\");\r\n            int index_actual_requst = 0;\r\n            for (JSONObject item : (Iterable<JSONObject>) entries) {\r\n                JSONObject request = (JSONObject) item.get(\"request\");\r\n                String url_request = request.get(\"url\").toString();\r\n                if (url_request.equals(url)&& index_request_har==index_actual_requst) {\r\n                    JSONArray messages =(JSONArray) item.get(\"_webSocketMessages\");\r\n                    int index_request = 0;\r\n                    for(int i=0; i< messages.size();i++) {\r\n                        JSONObject message = (JSONObject) messages.get(i);\r\n                        String type = message.get(\"type\").toString();\r\n                        if(\"request\".equals(type)) {\r\n                            appendRequestAndResponse(doc,hashTree,message,replacement,index_request,url);\r\n                            index_request++;\r\n                        }\r\n                    }\r\n                }\r\n                index_actual_requst++;\r\n            }\r\n        }catch (Exception e) {System.out.println(e);}\r\n    }\r\n\r\n\r\n    private void appendRequestAndResponse(Document doc, Node hashTree, JSONObject message, JSONObject replacement, int index,String url) {\r\n        Node genericControllerRequest = doc.createElement(\"GenericController\");\r\n        ((Element)genericControllerRequest).setAttribute(\"guiclass\",\"LogicControllerGui\");\r\n        ((Element)genericControllerRequest).setAttribute(\"testclass\",\"GenericController\");\r\n        ((Element)genericControllerRequest).setAttribute(\"testname\",\"Request \"+index);\r\n        ((Element)genericControllerRequest).setAttribute(\"enabled\",\"true\");\r\n        hashTree.appendChild(genericControllerRequest);\r\n\r\n        Node hashTreeRequest = doc.createElement(\"hashTree\");\r\n        Node singleWrite = doc.createElement(\"eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler\");\r\n        ((Element)singleWrite).setAttribute(\"guiclass\",\"eu.luminis.jmeter.wssampler.SingleWriteWebSocketSamplerGui\");\r\n        ((Element)singleWrite).setAttribute(\"testclass\",\"eu.luminis.jmeter.wssampler.SingleWriteWebSocketSampler\");\r\n        ((Element)singleWrite).setAttribute(\"testname\",\"Request\");\r\n        ((Element)singleWrite).setAttribute(\"enabled\",\"true\");\r\n\r\n        Node boolPropTLS = doc.createElement(\"boolProp\");\r\n        ((Element)boolPropTLS).setAttribute(\"name\",\"TLS\");\r\n        boolPropTLS.setTextContent(\"false\");\r\n\r\n        Node server = doc.createElement(\"stringProp\");\r\n        ((Element)server).setAttribute(\"name\",\"server\");\r\n        server.setTextContent(\"\");\r\n\r\n        Node port = doc.createElement(\"stringProp\");\r\n        ((Element)port).setAttribute(\"name\",\"port\");\r\n        port.setTextContent(\"80\");\r\n\r\n        Node path = doc.createElement(\"stringProp\");\r\n        ((Element)path).setAttribute(\"name\",\"path\");\r\n        path.setTextContent(\"\");\r\n\r\n        Node connecttimeout = doc.createElement(\"stringProp\");\r\n        ((Element)connecttimeout).setAttribute(\"name\",\"connectTimeout\");\r\n        connecttimeout.setTextContent(\"20000\");\r\n\r\n        Node boolPropBP = doc.createElement(\"boolProp\");\r\n        ((Element)boolPropBP).setAttribute(\"name\",\"binaryPayload\");\r\n        boolPropBP.setTextContent(\"false\");\r\n\r\n        Node requestData = doc.createElement(\"stringProp\");\r\n        ((Element)requestData).setAttribute(\"name\",\"requestData\");\r\n        String data =(String)message.get(\"data\");\r\n        requestData.setTextContent(replacementsInWSRequestData(data,replacement,index));\r\n\r\n        Node newConnection = doc.createElement(\"boolProp\");\r\n        ((Element)newConnection).setAttribute(\"name\",\"createNewConnection\");\r\n        newConnection.setTextContent(\"false\");\r\n\r\n        Node loadDataFromFile = doc.createElement(\"boolProp\");\r\n        ((Element)loadDataFromFile).setAttribute(\"name\",\"loadDataFromFile\");\r\n        loadDataFromFile.setTextContent(\"false\");\r\n\r\n        Node dataFile = doc.createElement(\"stringProp\");\r\n        ((Element)dataFile).setAttribute(\"name\",\"dataFile\");\r\n        dataFile.setTextContent(\"\");\r\n\r\n        singleWrite.appendChild(boolPropTLS);\r\n        singleWrite.appendChild(server);\r\n        singleWrite.appendChild(port);\r\n        singleWrite.appendChild(path);\r\n        singleWrite.appendChild(connecttimeout);\r\n        singleWrite.appendChild(boolPropBP);\r\n        singleWrite.appendChild(requestData);\r\n        singleWrite.appendChild(newConnection);\r\n        singleWrite.appendChild(loadDataFromFile);\r\n        singleWrite.appendChild(dataFile);\r\n\r\n        hashTreeRequest.appendChild(singleWrite);\r\n        hashTreeRequest.appendChild(doc.createElement(\"hashTree\"));\r\n        hashTree.appendChild(hashTreeRequest);\r\n\r\n        Node whileWSResponding = doc.createElement(\"WhileController\");\r\n        ((Element)whileWSResponding).setAttribute(\"guiclass\",\"WhileControllerGui\");\r\n        ((Element)whileWSResponding).setAttribute(\"testclass\",\"WhileController\");\r\n        ((Element)whileWSResponding).setAttribute(\"testname\",\"While WebSocket is responding\");\r\n        ((Element)whileWSResponding).setAttribute(\"enabled\",\"true\");\r\n        Node condition = doc.createElement(\"stringProp\");\r\n        ((Element)condition).setAttribute(\"name\",\"WhileController.condition\");\r\n        condition.setTextContent(\"${__groovy(vars.get(\\\"webSocketResponding\\\") != \\\"false\\\")}\");\r\n        whileWSResponding.appendChild(condition);\r\n        hashTreeRequest.appendChild(whileWSResponding);\r\n        hashTreeRequest.appendChild(createHashTreeReadMessageLoop(doc,index,url));\r\n        hashTreeRequest.appendChild(updateParamAfterRequestMessageNode(doc));\r\n        hashTreeRequest.appendChild(doc.createElement(\"hashTree\"));\r\n        if(variablesWS.get(url).containsKey(index)) {\r\n            for(variableWS vws :variablesWS.get(url).get(index)) {\r\n                hashTreeRequest.appendChild(createJSONExtractor(doc,vws));\r\n                hashTreeRequest.appendChild(doc.createElement(\"hashTree\"));\r\n            }\r\n        }\r\n    }\r\n\r\n    private Node createJSONExtractor(Document doc, variableWS vws) {\r\n        Node jpp = doc.createElement(\"JSONPostProcessor\");\r\n        ((Element)jpp).setAttribute(\"guiclass\",\"JSONPostProcessorGui\");\r\n        ((Element)jpp).setAttribute(\"testClass\",\"JSONPostProcessor\");\r\n        ((Element)jpp).setAttribute(\"testname\",vws.varName+\" Extractor\");\r\n        ((Element)jpp).setAttribute(\"enabled\",\"true\");\r\n\r\n        Node referencenames = doc.createElement(\"stringProp\");\r\n        ((Element)referencenames).setAttribute(\"name\",\"JSONPostProcessor.referenceNames\");\r\n        referencenames.setTextContent(vws.value);\r\n\r\n        Node pathexpr = doc.createElement(\"stringProp\");\r\n        ((Element)pathexpr).setAttribute(\"name\",\"JSONPostProcessor.jsonPathExprs\");\r\n        pathexpr.setTextContent(vws.pathExpr);\r\n\r\n        Node num = doc.createElement(\"stringProp\");\r\n        ((Element)num).setAttribute(\"name\",\"JSONPostProcessor.match_numbers\");\r\n        num.setTextContent(\"1\");\r\n\r\n        Node scope = doc.createElement(\"stringProp\");\r\n        ((Element)scope).setAttribute(\"name\",\"Sample.scope\");\r\n        scope.setTextContent(\"variable\");\r\n\r\n        Node scopeVariable= doc.createElement(\"stringProp\");\r\n        ((Element)scopeVariable).setAttribute(\"name\",\"Scope.variable\");\r\n        scopeVariable.setTextContent(vws.varName+\"_dataResponse\");\r\n\r\n        Node defaultValue= doc.createElement(\"stringProp\");\r\n        ((Element)defaultValue).setAttribute(\"name\",\"JSONPostProcessor.defaultValues\");\r\n        defaultValue.setTextContent(\"NOT_FOUND\");\r\n\r\n        jpp.appendChild(referencenames);\r\n        jpp.appendChild(pathexpr);\r\n        jpp.appendChild(num);\r\n        jpp.appendChild(scope);\r\n        jpp.appendChild(scopeVariable);\r\n        jpp.appendChild(defaultValue);\r\n        return jpp;\r\n    }\r\n\r\n    private Node updateParamAfterRequestMessageNode(Document doc) {\r\n        Node jpp = doc.createElement(\"JSR223Sampler\");\r\n        ((Element)jpp).setAttribute(\"guiclass\",\"TestBeanGUI\");\r\n        ((Element)jpp).setAttribute(\"testclass\",\"JSR223Sampler\");\r\n        ((Element)jpp).setAttribute(\"testname\",\"Update Params After Request Message\");\r\n        ((Element)jpp).setAttribute(\"enabled\",\"true\");\r\n        Node language = doc.createElement(\"stringProp\");\r\n        ((Element)language).setAttribute(\"name\",\"scriptLanguage\");\r\n        language.setTextContent(\"groovy\");\r\n\r\n        Node parameters = doc.createElement(\"stringProp\");\r\n        ((Element)parameters).setAttribute(\"name\",\"parameters\");\r\n        parameters.setTextContent(\"\");\r\n\r\n        Node filename = doc.createElement(\"stringProp\");\r\n        ((Element)filename).setAttribute(\"name\",\"filename\");\r\n        filename.setTextContent(\"\");\r\n\r\n        Node cachekey = doc.createElement(\"stringProp\");\r\n        ((Element)cachekey).setAttribute(\"name\",\"cacheKey\");\r\n        cachekey.setTextContent(\"true\");\r\n\r\n        Node script = doc.createElement(\"stringProp\");\r\n        ((Element)script).setAttribute(\"name\",\"script\");\r\n        script.setTextContent(\"//init webSocketResponding\\n\" +\r\n                \"vars.put(\\\"webSocketResponding\\\",\\\"true\\\");\");\r\n        jpp.appendChild(language);\r\n        jpp.appendChild(cachekey);\r\n        jpp.appendChild(parameters);\r\n        jpp.appendChild(filename);\r\n        jpp.appendChild(script);\r\n        return jpp;\r\n    }\r\n\r\n    private String replacementsInWSRequestData(String oldData, JSONObject replacement,int index) {\r\n        JSONArray requestWS = (JSONArray) replacement.get(\"RequestWS\");\r\n        String newData = oldData;\r\n        if(replacement.size()==0) return oldData;\r\n        for(Object item_request : requestWS) {\r\n            Long num_item_req = (Long) ((JSONObject)item_request).get(\"NumReqWS\");\r\n            if(num_item_req == (index)) {\r\n                String value = ((JSONObject)item_request).get(\"Value\").toString();\r\n                String name = (String) ((JSONObject)item_request).get(\"Name\");\r\n                newData = replaceAtomicJSONObject(newData,name,value);\r\n            }\r\n        }\r\n        return newData;\r\n    }\r\n\r\n    private Node getSimpleReadNode(Document doc) {\r\n        Node read = doc.createElement(\"eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler\");\r\n        ((Element)read).setAttribute(\"guiclass\",\"eu.luminis.jmeter.wssampler.SingleReadWebSocketSamplerGui\");\r\n        ((Element)read).setAttribute(\"testclass\",\"eu.luminis.jmeter.wssampler.SingleReadWebSocketSampler\");\r\n        ((Element)read).setAttribute(\"testname\",\"Response\");\r\n        ((Element)read).setAttribute(\"enabled\",\"true\");\r\n\r\n        Node boolPropTLS = doc.createElement(\"boolProp\");\r\n        ((Element)boolPropTLS).setAttribute(\"name\",\"TLS\");\r\n        boolPropTLS.setTextContent(\"false\");\r\n\r\n        Node server = doc.createElement(\"stringProp\");\r\n        ((Element)server).setAttribute(\"name\",\"server\");\r\n        server.setTextContent(\"\");\r\n\r\n        Node port = doc.createElement(\"stringProp\");\r\n        ((Element)port).setAttribute(\"name\",\"port\");\r\n        port.setTextContent(\"80\");\r\n\r\n        Node path = doc.createElement(\"stringProp\");\r\n        ((Element)path).setAttribute(\"name\",\"path\");\r\n        path.setTextContent(\"\");\r\n\r\n        Node connecttimeout = doc.createElement(\"stringProp\");\r\n        ((Element)connecttimeout).setAttribute(\"name\",\"connectTimeout\");\r\n        connecttimeout.setTextContent(\"20000\");\r\n\r\n        Node datatype = doc.createElement(\"stringProp\");\r\n        ((Element)datatype).setAttribute(\"name\",\"dataType\");\r\n        datatype.setTextContent(\"Text\");\r\n\r\n        Node newConnection = doc.createElement(\"boolProp\");\r\n        ((Element)newConnection).setAttribute(\"name\",\"createNewConnection\");\r\n        newConnection.setTextContent(\"false\");\r\n\r\n\r\n        Node readTimeout = doc.createElement(\"stringProp\");\r\n        ((Element)readTimeout).setAttribute(\"name\",\"readTimeout\");\r\n        readTimeout.setTextContent(\"10000\");\r\n\r\n        Node optional = doc.createElement(\"boolProp\");\r\n        ((Element)optional).setAttribute(\"name\",\"optional\");\r\n        optional.setTextContent(\"true\");\r\n\r\n        read.appendChild(boolPropTLS);\r\n        read.appendChild(server);\r\n        read.appendChild(port);\r\n        read.appendChild(path);\r\n        read.appendChild(connecttimeout);\r\n        read.appendChild(datatype);\r\n        read.appendChild(newConnection);\r\n        read.appendChild(readTimeout);\r\n        read.appendChild(optional);\r\n\r\n        return read;\r\n    }\r\n\r\n    private Node createHashTreeReadMessageLoop (Document doc,int index,String url) {\r\n        Node hashTree = doc.createElement(\"hashTree\");\r\n        Node read = getSimpleReadNode(doc);\r\n        hashTree.appendChild(read);\r\n        hashTree.appendChild(appendSaveTemporanealyNode(doc));\r\n        hashTree.appendChild(IfNotisLastFrameNode(doc));\r\n        hashTree.appendChild(hashTreeConcatenateResponse(doc));\r\n        hashTree.appendChild(IfIsLastFrame(doc));\r\n        if(variablesWS.get(url).containsKey(index)){\r\n            hashTree.appendChild(hashTreeSave(doc,index,url));\r\n        }\r\n        return hashTree;\r\n    }\r\n\r\n    private Node hashTreeSave(Document doc,int index,String url) {\r\n        Node hashTree = doc.createElement(\"hashTree\");\r\n        Node jpp = doc.createElement(\"JSR223Sampler\");\r\n        ((Element)jpp).setAttribute(\"guiclass\",\"TestBeanGUI\");\r\n        ((Element)jpp).setAttribute(\"testclass\",\"JSR223Sampler\");\r\n        ((Element)jpp).setAttribute(\"testname\",\"Save\");\r\n        ((Element)jpp).setAttribute(\"enabled\",\"true\");\r\n\r\n        Node parameters = doc.createElement(\"stringProp\");\r\n        ((Element)parameters).setAttribute(\"name\",\"parameters\");\r\n        parameters.setTextContent(\"\");\r\n\r\n        Node filename = doc.createElement(\"stringProp\");\r\n        ((Element)filename).setAttribute(\"name\",\"filename\");\r\n        filename.setTextContent(\"\");\r\n\r\n        Node cachekey = doc.createElement(\"stringProp\");\r\n        ((Element)cachekey).setAttribute(\"name\",\"cacheKey\");\r\n        cachekey.setTextContent(\"true\");\r\n        Node language = doc.createElement(\"stringProp\");\r\n        ((Element)language).setAttribute(\"name\",\"scriptLanguage\");\r\n        language.setTextContent(\"javascript\");\r\n\r\n        Node script = doc.createElement(\"stringProp\");\r\n        ((Element)script).setAttribute(\"name\",\"script\");\r\n        String scriptText =\" var str = vars.get(\\\"tmp\\\");\\n\" +\r\n                \"var re =/\"+variablesWS.get(url).get(index).first().regEx+\"/;\\n\" +\r\n                \"var found = str.match(re);\\n\" +\r\n                \"if(found != null) {\\n\" +\r\n                \"\\tvars.put(\\\"\"+variablesWS.get(url).get(index).first().varName+\"_dataResponse\\\",str);\\n\" +\r\n                \"\\t}\";\r\n        Iterator<variableWS> iteratorWs = variablesWS.get(url).get(index).iterator();\r\n        iteratorWs.next();\r\n        while(iteratorWs.hasNext()) {\r\n            variableWS item = iteratorWs.next();\r\n            scriptText=scriptText+\"\\n\"+\r\n                    \"re =/\"+item.regEx+\"/;\\n\" +\r\n                    \"found = str.match(re);\\n\" +\r\n                    \"if(found != null) {\\n\" +\r\n                    \"\\tvars.put(\\\"\"+item.varName+\"_dataResponse\\\",str);\\n\" +\r\n                    \"\\t}\";\r\n        }\r\n        script.setTextContent(scriptText);\r\n        jpp.appendChild(cachekey);\r\n        jpp.appendChild(parameters);\r\n        jpp.appendChild(filename);\r\n        jpp.appendChild(language);\r\n        jpp.appendChild(script);\r\n        hashTree.appendChild(jpp);\r\n        hashTree.appendChild(doc.createElement(\"hashTree\"));\r\n        return hashTree;\r\n    }\r\n\r\n    private Node IfIsLastFrame(Document doc){\r\n        Node Ifcontroller = doc.createElement(\"IfController\");\r\n        ((Element)Ifcontroller).setAttribute(\"guiclass\",\"IfControllerPanel\");\r\n        ((Element)Ifcontroller).setAttribute(\"testclass\",\"IfController\");\r\n        ((Element)Ifcontroller).setAttribute(\"testname\",\"IF Is Last Frame\");\r\n        ((Element)Ifcontroller).setAttribute(\"enabled\",\"true\");\r\n        Node condition = doc.createElement(\"stringProp\");\r\n        ((Element)condition).setAttribute(\"name\",\"IfController.condition\");\r\n        condition.setTextContent(\"${__groovy(vars.get(\\\"websocket.last_frame_final\\\").equals(\\\"true\\\"),)}\");\r\n        Node evaluateAll = doc.createElement(\"boolProp\");\r\n        ((Element)evaluateAll).setAttribute(\"name\",\"IfController.evaluateAll\");\r\n        evaluateAll.setTextContent(\"false\");\r\n        Node useExpression = doc.createElement(\"boolProp\");\r\n        ((Element)useExpression).setAttribute(\"name\",\"IfController.useExpression\");\r\n        useExpression.setTextContent(\"true\");\r\n        Ifcontroller.appendChild(condition);\r\n        Ifcontroller.appendChild(evaluateAll);\r\n        Ifcontroller.appendChild(useExpression);\r\n        return Ifcontroller;\r\n    }\r\n\r\n    private Node IfNotisLastFrameNode(Document doc) {\r\n        Node Ifcontroller = doc.createElement(\"IfController\");\r\n        ((Element)Ifcontroller).setAttribute(\"guiclass\",\"IfControllerPanel\");\r\n        ((Element)Ifcontroller).setAttribute(\"testclass\",\"IfController\");\r\n        ((Element)Ifcontroller).setAttribute(\"testname\",\"IF Not is Last Frame\");\r\n        ((Element)Ifcontroller).setAttribute(\"enabled\",\"true\");\r\n        Node condition = doc.createElement(\"stringProp\");\r\n        ((Element)condition).setAttribute(\"name\",\"IfController.condition\");\r\n        condition.setTextContent(\"${__groovy(!vars.get(\\\"websocket.last_frame_final\\\").equals(\\\"true\\\"),)}\");\r\n        Node evaluateAll = doc.createElement(\"boolProp\");\r\n        ((Element)evaluateAll).setAttribute(\"name\",\"IfController.evaluateAll\");\r\n        evaluateAll.setTextContent(\"false\");\r\n        Node useExpression = doc.createElement(\"boolProp\");\r\n        ((Element)useExpression).setAttribute(\"name\",\"IfController.useExpression\");\r\n        useExpression.setTextContent(\"true\");\r\n        Ifcontroller.appendChild(condition);\r\n        Ifcontroller.appendChild(evaluateAll);\r\n        Ifcontroller.appendChild(useExpression);\r\n        return Ifcontroller;\r\n    }\r\n\r\n    private Node hashTreeConcatenateResponse(Document doc) {\r\n        Node hashTree = doc.createElement(\"hashTree\");\r\n        Node whileIsNotTheLastFrame = doc.createElement(\"WhileController\");\r\n        ((Element)whileIsNotTheLastFrame).setAttribute(\"guiclass\",\"WhileControllerGui\");\r\n        ((Element)whileIsNotTheLastFrame).setAttribute(\"testclass\",\"WhileController\");\r\n        ((Element)whileIsNotTheLastFrame).setAttribute(\"testname\",\"While is no the last frame\");\r\n        ((Element)whileIsNotTheLastFrame).setAttribute(\"enabled\",\"true\");\r\n        Node condition = doc.createElement(\"stringProp\");\r\n        ((Element)condition).setAttribute(\"name\",\"WhileController.condition\");\r\n        condition.setTextContent(\"${__groovy(!vars.get(\\\"websocket.last_frame_final\\\").equals(\\\"true\\\"),)}\");\r\n        whileIsNotTheLastFrame.appendChild(condition);\r\n        hashTree.appendChild(whileIsNotTheLastFrame);\r\n        Node hashTreeWhile= doc.createElement(\"hashTree\");\r\n        Node read = getSimpleReadNode(doc);\r\n        hashTreeWhile.appendChild(read);\r\n        Node hashTreeConcatenate = doc.createElement(\"hashTree\");\r\n        Node jpp = doc.createElement(\"JSR223PostProcessor\");\r\n        ((Element)jpp).setAttribute(\"guiclass\",\"TestBeanGUI\");\r\n        ((Element)jpp).setAttribute(\"testclass\",\"JSR223PostProcessor\");\r\n        ((Element)jpp).setAttribute(\"testname\",\"Concatenate\");\r\n        ((Element)jpp).setAttribute(\"enabled\",\"true\");\r\n\r\n        Node scriptL = doc.createElement(\"stringProp\");\r\n        ((Element)scriptL).setAttribute(\"name\",\"scriptLanguage\");\r\n        scriptL.setTextContent(\"javascript\");\r\n\r\n        Node parameters = doc.createElement(\"stringProp\");\r\n        ((Element)parameters).setAttribute(\"name\",\"parameters\");\r\n        parameters.setTextContent(\"\");\r\n\r\n        Node filename = doc.createElement(\"stringProp\");\r\n        ((Element)filename).setAttribute(\"name\",\"filename\");\r\n        filename.setTextContent(\"\");\r\n\r\n        Node cachekey = doc.createElement(\"stringProp\");\r\n        ((Element)cachekey).setAttribute(\"name\",\"cacheKey\");\r\n        cachekey.setTextContent(\"true\");\r\n\r\n        Node script = doc.createElement(\"stringProp\");\r\n        ((Element)script).setAttribute(\"name\",\"script\");\r\n        script.setTextContent(\"var responsedata = prev.getResponseDataAsString();\\n\" +\r\n                \"var responsecode = ctx.getPreviousResult().getResponseCode(); \\n\" +\r\n                \"\\n\" +\r\n                \"vars.put(\\\"tmp\\\",vars.get(\\\"tmp\\\")+\\'\\'+responsedata);\\n\" +\r\n                \"if(responsecode === \\\"No response\\\") {\\n\" +\r\n                \"\\tvars.put(\\\"webSocketResponding\\\",\\\"false\\\");\\n\" +\r\n                \"\\t} \");\r\n        jpp.appendChild(scriptL);\r\n        jpp.appendChild(parameters);\r\n        jpp.appendChild(filename);\r\n        jpp.appendChild(cachekey);\r\n        jpp.appendChild(script);\r\n\r\n        hashTreeConcatenate.appendChild(jpp);\r\n        hashTreeConcatenate.appendChild(doc.createElement(\"hashTree\"));\r\n        hashTreeWhile.appendChild(hashTreeConcatenate);\r\n        hashTree.appendChild(hashTreeWhile);\r\n        return hashTree;\r\n    }\r\n\r\n\r\n    private Node appendSaveTemporanealyNode(Document doc) {\r\n        Node hashTree = doc.createElement(\"hashTree\");\r\n        Node jpp = doc.createElement(\"JSR223PostProcessor\");\r\n        ((Element)jpp).setAttribute(\"guiclass\",\"TestBeanGUI\");\r\n        ((Element)jpp).setAttribute(\"testclass\",\"JSR223PostProcessor\");\r\n        ((Element)jpp).setAttribute(\"testname\",\"Save temporanealy\");\r\n        ((Element)jpp).setAttribute(\"enabled\",\"true\");\r\n\r\n        Node scriptL = doc.createElement(\"stringProp\");\r\n        ((Element)scriptL).setAttribute(\"name\",\"scriptLanguage\");\r\n        scriptL.setTextContent(\"javascript\");\r\n\r\n        Node parameters = doc.createElement(\"stringProp\");\r\n        ((Element)parameters).setAttribute(\"name\",\"parameters\");\r\n        parameters.setTextContent(\"\");\r\n\r\n        Node filename = doc.createElement(\"stringProp\");\r\n        ((Element)filename).setAttribute(\"name\",\"filename\");\r\n        filename.setTextContent(\"\");\r\n\r\n        Node cachekey = doc.createElement(\"stringProp\");\r\n        ((Element)cachekey).setAttribute(\"name\",\"cacheKey\");\r\n        cachekey.setTextContent(\"true\");\r\n\r\n        Node script = doc.createElement(\"stringProp\");\r\n        ((Element)script).setAttribute(\"name\",\"script\");\r\n        script.setTextContent(\"var responsedata = prev.getResponseDataAsString();\\n\" +\r\n                \"var responsecode = ctx.getPreviousResult().getResponseCode(); \\n\" +\r\n                \"\\n\" +\r\n                \"vars.put(\\\"tmp\\\",responsedata);\\n\" +\r\n                \"\\n\" +\r\n                \"if(responsecode === \\\"No response\\\") {\\n\" +\r\n                \"\\n\" +\r\n                \"\\tvars.put(\\\"webSocketResponding\\\",\\\"false\\\");\\n\" +\r\n                \"\\t}\");\r\n        jpp.appendChild(scriptL);\r\n        jpp.appendChild(parameters);\r\n        jpp.appendChild(filename);\r\n        jpp.appendChild(cachekey);\r\n        jpp.appendChild(script);\r\n        hashTree.appendChild(jpp);\r\n        hashTree.appendChild(doc.createElement(\"hashTree\"));\r\n        return hashTree;\r\n    }\r\n\r\n\r\n    public static void main(String[]args){\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Services/CorrelationsView/ScriptGeneration/JMeterAdaption.java b/src/main/java/Services/CorrelationsView/ScriptGeneration/JMeterAdaption.java
--- a/src/main/java/Services/CorrelationsView/ScriptGeneration/JMeterAdaption.java	
+++ b/src/main/java/Services/CorrelationsView/ScriptGeneration/JMeterAdaption.java	
@@ -128,7 +128,6 @@
     }
 
     private void appendCSVConfig(Document doc, NodeList threads, List<CSVNode>csv_deps) {
-
         for(int i=0;i<threads.getLength();i++) {
             Node thread = threads.item(i);
             Node hash = thread.getNextSibling().getNextSibling();
